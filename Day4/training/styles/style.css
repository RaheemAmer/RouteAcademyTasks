/* * {
    margin: 0;
    padding: 0;
} */

* {
    box-sizing: border-box;
}

.our-baking {
    text-align: center;
}

.item {
    width: 33.33%;
    float: left;
    padding: 10px;
}

.item img {
    width: 100%;
}

.inner {
    background-color: teal;
}

@media screen and (max-width: 600px) {
    .item {
        width: 100%;
    }
}

@media screen and (max-width: 601px) and (max-width: 768px) {
    .item {
        width: 50%;
    }
}


/* 
breakpoint in rwd
0 - 600
601 = 768
769 - 962
993 - 1200

instead of clearing float we give width:100%

you can either write media query after each section
after whole page
move it into separate file
*/


/* for printing */

@media print {
    .item {
        width: 50%;
    }
}


/* for reading */

@media speech {
    .item {
        width: 50%;
    }
}


/* for all */

@media all {
    .item {
        width: 50%;
    }
}


/* 
Cover -> gonna stretch the dimensions of the image
Contain -> gonna make the dimensions of it similar to parent
*/


/* 
Http request- solve too many request from the server for images - using spreadsheet - spirits
*/


/* 
remove the element and don't reserve his place act like it doesn't exist - display:none;
visibility: hidden;
opacity:0; - div + div content --- rgba affects on the background only - reserve place
overflow: hidden - no reserve place - if it's width is increased -  it deletes the rest / overflow: scroll and adds scroll bar
overflow: auto if it's increased it adds scrollbar otherwise 

(margin collapse) is solved using overflow
giv parent overflow: hidden;
*/


/*
outline doesn't add up to the width of the box
*/


/* 
border can act like outline if we made box-sizing: border-box
*/


/*
outline can't pick each side you want 
there is no outline-radius
*/


/*  
display: block;
-block takes full width as long as you didn't mention a specified width
-apply all width, height and margin and padding
-add line break

display:inline
-no line break
-no to all (padding and margin only works left and right) top and bottom if added block line like div, it will overflow the content of div

display:inline-block;
-combines both inline and block
-width if fitted according to content's width
*/


/* 
Display: none
removed and hidden even from workflow

visibility: hidden;
hide the element but keeps it's place in the workflow
*/


/* 
Use case:
if there is a possibility that your box will increase size in the future or stretched out then
min-width is better than width, same for max-width (height also has the same properties)
*/


/* 
using display: inline-block to make width fit content is not the best practice so we use
width: fit-content;
*/


/* 
overflow: visible; (default behavior) - can control x and y axis
- hidden when it exceeds the width of the div, the content is hidden
- scroll when it exceeds a right scroll bar appears
*/


/* 
text-shadow:
horizontal - x axis
vertical - y axis
noise - increase fog 
color - use rgba for alpha opacity

text-align: 
- justify -> extend text to fit the width of box
!important
*/


/* 
text-direction:
control content position in the page
direction:
control direction of content in the page
*/


/* 
letter-spacing:
word-spacing:
text-indent: better than padding for text
lne-height: 1.6
white-space:nowrap -> doesn't break line 
word-break: works if words are outside the div -> break-word;
text-overflow: ellipsis; put three dots to show that the words is still not finished
*/


/* 
div:hover{
    overflow:visible;
}
    instead using this we use html attribute called title

    div - border: 2px solid red
    div p - border-color: initial;
*/


/* 
CSS units
px
percentage
em => time
rem => root time - takes initial values from parent which is html tag
vw => viewport width
vh => viewport height
vmin => viewport minimum


Notes:
1em = 16px (This is wrong) - em according to parent's font size
default font size is 16px
*/


/* 
font-variant: small-caps only makes capital word  but with smaller font-size compared to text-transform: capitalize
*/


/* 
Solve float issues with overflow-hidden;
use case:
if you have a pop up or drop down menu then this is not gonna work
or 
specify a height for the parent element not optimal solution
*/


/* 
content width is: 100%
5 spaces is 1% * 5 => 5% from content width
95% available space
4 elements, the width is gonna be 95% / 4

instead of calculating values for float we can use 
width:calc(95% / 4);

if we want margin-left: 15px;
6 spaces - 15px * 6 => 90px from content width
100% - 90px available space
5 elements width:calc((100% - 90px) / 5);
*/

.task1 {
    background-color: royalblue;
    padding: 10px;
    width: 70%;
    text-align: center;
    /* margin-left: 15%;
    margin-right: 15%; */
    /* margin-left: auto;
    margin-right: auto; */
    margin: auto;
    /* outline: 4px solid green; */
    /* display: block; */
    vertical-align: text-bottom;
}

.container {
    margin: 0 auto;
    border: 2px solid red;
    text-align: center;
}